install.packages("NbClust")
water <- read.csv("C:/Users/Nier/Desktop/논문데이터분석_hsy/논문데이터분석(Evaluation and Grade Classification of River Water Quality Using Statistical Techniques)/군집분석.csv", sep=",", header=T)
water_name <- water[,1]
water <- water[,-1]
rownames(water) <- water_name
View(water)
library(SOMbrero)
library(kohonen)
# Normalization of data
water_scale <- data.frame(scale(water))
water_scale_matrix <- as.matrix(water_scale)
library(kohonen)
som_grid <- somgrid(xdim=1, ydim=4, topo="hexagonal")
som_model1 <- som(month_scale_matrix, grid=som_grid)
str(som_model1)
som_model2 <- trainSOM(x.data=month_scale, dimension=c(4,1),
nb.save=10, maxit=2000, scaling="none",
radius.type="letremy")
som_grid <- somgrid(xdim=1, ydim=4, topo="hexagonal")
som_model1 <- som(water_scale_matrix, grid=som_grid)
str(som_model1)
som_model2 <- trainSOM(x.data=water_scale, dimension=c(4,1),
nb.save=10, maxit=2000, scaling="none",
radius.type="letremy")
str(som_model2)
# Visualization
plot(som_model1, main="feature distribution")
table(som_model2$clustering)
plot(som_model2, what="prototypes", type="umatrix", print.title=T)
plot(som_model2, what="obs", type="names", print.title=T, scale=c(1,1))
plot(som_model1, type="counts", main="cluster size")
par(mfrow=c(1,2))
plot(som_model1, main="feature distribution")
plot(som_model2, what="obs", type="names", print.title=T, scale=c(1,1))
par(mfrow=c(1,1))
# Visualization
plot(som_model1, main="feature distribution")
plot(som_model2, what="prototypes", type="umatrix", print.title=T)
table(som_model2$clustering)
plot(som_model2, what="obs", type="names", print.title=T, scale=c(1,1))
# Visualization
plot(som_model1, main="feature distribution")
plot(som_model2, what="obs", type="names", print.title=T, scale=c(1,1))
# Training the SOM model
som_grid <- somgrid(xdim=1, ydim=2, topo="hexagonal")
som_grid <- somgrid(xdim=1, ydim=2, topo="hexagonal")
som_model1 <- som(water_scale_matrix, grid=som_grid)
str(som_model1)
som_model2 <- trainSOM(x.data=water_scale, dimension=c(2,1),
nb.save=10, maxit=2000, scaling="none",
radius.type="letremy")
str(som_model2)
# Visualization
plot(som_model1, main="feature distribution")
plot(som_model2, what="obs", type="names", print.title=T, scale=c(1,1))
water <- read.csv("C:/Users/Nier/Desktop/논문데이터분석_hsy/논문데이터분석(Evaluation and Grade Classification of River Water Quality Using Statistical Techniques)/cluster.csv", sep=",", header=T)
water_name <- water[,1]
water <- water[,-1]
rownames(water) <- water_name
View(water)
water_scale <- data.frame(scale(water))
water_scale_matrix <- as.matrix(water_scale)
som_grid <- somgrid(xdim=1, ydim=2, topo="hexagonal")
som_model1 <- som(water_scale_matrix, grid=som_grid)
str(som_model1)
som_model2 <- trainSOM(x.data=water_scale, dimension=c(2,1),
nb.save=10, maxit=2000, scaling="none",
radius.type="letremy")
str(som_model2)
# Visualization
plot(som_model1, main="feature distribution")
plot(som_model2, what="obs", type="names", print.title=T, scale=c(1,1))
som_grid <- somgrid(xdim=1, ydim=4, topo="hexagonal")
som_model1 <- som(water_scale_matrix, grid=som_grid)
str(som_model1)
som_model2 <- trainSOM(x.data=water_scale, dimension=c(4,1),
nb.save=10, maxit=2000, scaling="none",
radius.type="letremy")
str(som_model2)
# Visualization
plot(som_model1, main="feature distribution")
plot(som_model2, what="obs", type="names", print.title=T, scale=c(1,1))
# Distance matrix
water_scale <- scale(water)
d <- dist(water_scale, method="euclidean")
as.matrix(d)[1:5,1:5]
View(water_scale)
# Apply Distance matrix model
fit <- hclust(d, method="ward.D")
library(NbClust)
nc <- NbClust(water_scale, distance="euclidean", method="ward.D")
nc
par(mfrow=c(1,1))
plot(fit)
rect.hclust(fit, k=2)
## Test with BOD
before_BOD <- c(3.8, 3.8, 3.9, 6.2, 5.4, 5.2, 4.4, 2.2) # 예년동월(2010~2019)
after_BOD <- c(2.9, 3.4, 2.9, 6.6, 6.0, 6.9, 5.0, 2.5) # 2020년 3월
BOD <- data.frame(before_BOD, after_BOD)
rownames(BOD) <- c('우치','황룡강3-1','지석천4','광산','나주',
'죽산','고막원천2-1','무안2')
# difference
BOD$diff <- BOD$before_BOD - BOD$after_BOD
sum(BOD$diff)
## Test with T-P
before_TP <- c(0.101, 0.137, 0.202, 0.260, 0.207,
0.144, 0.114, 0.060) # 예년동월(2010~2019)
after_TP <- c(0.107, 0.077, 0.087, 0.147, 0.128,
0.105, 0.105, 0.036) # 2020년 3월
TP <- data.frame(before_TP, after_TP)
rownames(TP) <- c('우치','황룡강3-1','지석천4','광산','나주',
'죽산','고막원천2-1','무안2')
# difference
TP$diff <- TP$before_TP - TP$after_TP
sum(TP$diff)
# Checking normality
# Q-Q plot
qqnorm(BOD$diff); qqline(BOD$diff,col=2)
# Shapiro-Wilk test
shapiro.test(BOD$diff)
# Paired t-test
t.test(BOD$before_BOD,BOD$after_BOD,paired=T,alternative="less")
# Checking normality
# Q-Q plot
qqnorm(TP$diff); qqline(TP$diff,col=2)
# Shapiro-Wilk test
shapiro.test(TP$diff)
# Paired t-test
t.test(TP$before_TP,TP$after_TP,paired=T,alternative="greater")
